{"version":3,"sources":["webpack:///./src/components/Card.js","webpack:///./src/pages/index.js","webpack:///./src/components/pageHeader.js","webpack:///./src/components/seo.js"],"names":["Card","props","image","data","node","thumbnail","childImageSharp","fluid","originalImg","pageName","name","React","createElement","className","postClass","style","backgroundImage","Link","to","Index","_ref","location","siteTitle","site","siteMetadata","title","subPages","allDataJson","postCounter","Layout","SEO","keywords","PageHeader","subtitle","description","edges","map","pages","key","count","StaticQuery","query","render","Object","assign","mode","Fragment","lang","meta","useStaticQuery","metaDescription","Helmet","htmlAttributes","titleTemplate","content","property","author","concat","length","join","defaultProps"],"mappings":"0MAmDeA,MAhDf,SAAcC,GAyBZ,MAAMC,EAAQD,EAAME,KAAKC,KAAKC,UAAUC,gBAAgBC,MAAMC,YACxDC,EAAWR,EAAME,KAAKC,KAAKM,KAEjC,OACEC,IAAAC,cAAA,WACEC,UAAY,cAAaZ,EAAMa,aAC7BZ,EAAS,aAAe,aAE1Ba,MACEb,GAAS,CACPc,gBAAkB,OAAMd,OAI5BS,IAAAC,cAACK,OAAI,CAACJ,UAAU,gCAAgCK,GAAG,KACjDP,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,MAAIC,UAAU,mBAAmBJ,O,YCjC3C,MAAMU,EAAQA,CAAAC,EAAWC,KAAc,IAAxB,KAAElB,GAAMiB,EACrB,MAAME,EAAYnB,EAAKoB,KAAKC,aAAaC,MACnCC,EAAWvB,EAAKwB,YAEtB,IAAIC,EAAc,EAElB,OACEjB,IAAAC,cAACiB,IAAM,CAACJ,MAAOH,GACbX,IAAAC,cAACkB,IAAG,CACFL,MAAM,UACNM,SAAU,CACP,QACA,WACA,UACA,WACA,QACA,aACA,iBACA,mBACA,gBACA,QACA,cAGLpB,IAAAC,cAACoB,IAAU,CACTP,MAAOH,EACPW,SAAU9B,EAAKoB,KAAKC,aAAaU,cAGnCvB,IAAAC,cAAA,OAAKC,UAAU,aACZa,EAASS,MAAMC,IAAIC,IAClBT,IAEEjB,IAAAC,cAACZ,EAAI,CACHsC,IAAKV,EACLW,MAAOX,EACPzB,KAAMkC,EACNvB,UAAY,cAmCXb,aACbU,IAAAC,cAAC4B,cAAW,CACVC,MA5BY,YA6BZC,OAAQvC,GACNQ,IAAAC,cAACO,EAAKwB,OAAAC,OAAA,CAACvB,SAAUpB,EAAMoB,SAAUpB,OAAK,EAACE,KAAMA,GAAUF,O,kCCvF7D,qEAGe,SAAS+B,EAAW/B,GACjC,MAAM,MAAEwB,EAAK,SAAEQ,EAAQ,KAAEY,GAAS5C,EAClC,OACEU,IAAAC,cAAAD,IAAAmC,SAAA,KACEnC,IAAAC,cAAA,UACEC,UAAY,aAAqB,UAATgC,EAAmB,WAAa,aACtDpB,EAAQ,SAAW,YAGrBd,IAAAC,cAAA,QAAMC,UAAoB,UAATgC,EAAmB,YAAc,cAC/CpB,GAASd,IAAAC,cAAA,MAAIC,UAAU,QAAQY,GAC/BQ,GAAYtB,IAAAC,cAAA,MAAIC,UAAU,mBAAmBoB,Q,yDCdxD,0DAYA,SAASH,EAAGV,GAAgD,IAA/C,YAAEc,EAAW,KAAEa,EAAI,KAAEC,EAAI,SAAEjB,EAAQ,MAAEN,GAAOL,EACvD,MAAM,KAAEG,GAAS0B,yBAAe,YAc1BC,EAAkBhB,GAAeX,EAAKC,aAAaU,YAEzD,OACEvB,IAAAC,cAACuC,IAAM,CACLC,eAAgB,CACdL,QAEFtB,MAAOA,EACP4B,cAAgB,IAAG9B,EAAKC,aAAaC,MACrCuB,KAAM,CACJ,CACEtC,KAAO,cACP4C,QAASJ,GAEX,CACEK,SAAW,WACXD,QAAS7B,GAEX,CACE8B,SAAW,iBACXD,QAASJ,GAEX,CACEK,SAAW,UACXD,QAAU,WAEZ,CACE5C,KAAO,eACP4C,QAAU,WAEZ,CACE5C,KAAO,kBACP4C,QAAS/B,EAAKC,aAAagC,QAE7B,CACE9C,KAAO,gBACP4C,QAAS7B,GAEX,CACEf,KAAO,sBACP4C,QAASJ,IAGVO,OACC1B,EAAS2B,OAAS,EACd,CACEhD,KAAO,WACP4C,QAASvB,EAAS4B,KAAM,OAE1B,IAELF,OAAOT,KAKhBlB,EAAI8B,aAAe,CACjBb,KAAO,KACPC,KAAM,GACNjB,SAAU,GACVG,YAAc,IAWDJ","file":"component---src-pages-index-js-340b37c509487ed2032a.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\n\nfunction Card(props) {\n  // const image = useStaticQuery(graphql`\n  // query ImageQuery {\n  //     file(absolutePath: {eq: \"/${props.data.regex}/\"}) {\n  //       childImageSharp {\n  //         fluid {\n  //           ...GatsbyImageSharpFluid\n  //         }\n  //       }\n  //     }\n  //   }\n  // `)\n\n  //   const data = useStaticQuery(graphql`\n  //   query HeaderQuery {\n  //     file(absolutePath: {eq: \"/${props.data.regex}/\"}) {\n  //       childImageSharp {\n  //         fluid {\n  //           ...GatsbyImageSharpFluid\n  //         }\n  //       }\n  //     }\n  //   }\n  // `)\n\n  const image = props.data.node.thumbnail.childImageSharp.fluid.originalImg\n  const pageName = props.data.node.name\n\n  return (\n    <article\n      className={`post-card  ${props.postClass} ${\n        image ? `with-image` : `no-image`\n      }`}\n      style={\n        image && {\n          backgroundImage: `url(${image})`,\n        }\n      }\n    >\n      <Link className=\"post-card-link cursor-pointer\" to=\"/\">\n        <div className=\"post-card-content\">\n          <h2 className=\"post-card-title\">{pageName}</h2>\n        </div>\n      </Link>\n    </article>\n  )\n}\n\nexport default Card\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\nimport Card from \"../components/Card\"\nimport PageHeader from \"../components/pageHeader\"\n\nconst Index = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const subPages = data.allDataJson\n\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"Welcome\"\n        keywords={[\n          `event`,\n          `birthday`,\n          `wedding`,\n          `planning`,\n          `decor`,\n          `decoration`,\n          `event planning`,\n          `event management`,\n          `wedding cards`,\n          `party`,\n          `catering`,\n        ]}\n      />\n      <PageHeader\n        title={siteTitle}\n        subtitle={data.site.siteMetadata.description}\n      ></PageHeader>\n\n      <div className=\"post-feed\">\n        {subPages.edges.map(pages => {\n          postCounter++\n          return (\n            <Card\n              key={postCounter}\n              count={postCounter}\n              data={pages}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n\n    allDataJson {\n      edges {\n        node {\n          name\n          thumbnail {\n            childImageSharp {\n              fluid {\n                originalImg\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <Index location={props.location} props data={data} {...props} />\n    )}\n  />\n)\n","import React from \"react\"\nimport Layout from \"./layout\"\n\nexport default function PageHeader(props) {\n  const { title, subtitle, mode } = props\n  return (\n    <>\n      <header\n        className={`page-head ${mode === \"black\" ? \"bg-black\" : \"inherit\"} ${\n          title ? \"pt-6vw\" : \"py-6vw\"\n        }`}\n      >\n        <span className={mode === \"black\" ? \"text-gold\" : \"text-black\"}>\n          {title && <h1 className=\"mb-0\">{title}</h1>}\n          {subtitle && <h2 className=\"page-head-title\">{subtitle}</h2>}\n        </span>\n      </header>\n    </>\n  )\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={` ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}